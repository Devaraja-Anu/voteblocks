// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email)
VALUES ($1, $2)
RETURNING id, username, email, password, created_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getPollsVotedByUser = `-- name: GetPollsVotedByUser :many
SELECT
  p.id,
  p.title,
  p.description,
  p.options,
  p.created_by,
  p.created_at,
  p.expires_at,
  p.active,
  v.option AS voted_option
FROM polls p
JOIN votes v ON p.id = v.poll_id
WHERE v.user_id = $1
`

type GetPollsVotedByUserRow struct {
	ID          int32            `json:"id"`
	Title       string           `json:"title"`
	Description *string          `json:"description"`
	Options     []string         `json:"options"`
	CreatedBy   pgtype.UUID      `json:"created_by"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	ExpiresAt   pgtype.Timestamp `json:"expires_at"`
	Active      bool             `json:"active"`
	VotedOption string           `json:"voted_option"`
}

func (q *Queries) GetPollsVotedByUser(ctx context.Context, userID pgtype.UUID) ([]GetPollsVotedByUserRow, error) {
	rows, err := q.db.Query(ctx, getPollsVotedByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPollsVotedByUserRow{}
	for rows.Next() {
		var i GetPollsVotedByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Options,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.Active,
			&i.VotedOption,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password, created_at FROM users ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
