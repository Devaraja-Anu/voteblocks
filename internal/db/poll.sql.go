// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: poll.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPoll = `-- name: CreatePoll :one
INSERT INTO polls (title,description,options,expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, title, description, options, created_at, expires_at, active
`

type CreatePollParams struct {
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Options     []string           `json:"options"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreatePoll(ctx context.Context, arg CreatePollParams) (Poll, error) {
	row := q.db.QueryRow(ctx, createPoll,
		arg.Title,
		arg.Description,
		arg.Options,
		arg.ExpiresAt,
	)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Options,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Active,
	)
	return i, err
}

const deactivateExpiredPolls = `-- name: DeactivateExpiredPolls :exec
UPDATE polls
SET active = false
WHERE active = true
AND expires_at IS NOT NULL
AND expires_at < now()
`

func (q *Queries) DeactivateExpiredPolls(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deactivateExpiredPolls)
	return err
}

const getPoll = `-- name: GetPoll :one
SELECT id, title, description, options, created_at, expires_at, active FROM polls WHERE id = $1
`

func (q *Queries) GetPoll(ctx context.Context, id int64) (Poll, error) {
	row := q.db.QueryRow(ctx, getPoll, id)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Options,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Active,
	)
	return i, err
}

const getPollWithVoteCounts = `-- name: GetPollWithVoteCounts :one
SELECT 
    p.id AS poll_id,
    p.title,
    p.description,
    p.options,
    p.created_at,
    p.expires_at,
    p.active,
    COALESCE(vote_counts.counts, '{}'::jsonb) AS vote_counts
FROM polls p
LEFT JOIN LATERAL (
    SELECT jsonb_object_agg(option, count) AS counts
    FROM (
        SELECT option, COUNT(*) AS count
        FROM votes
        WHERE poll_id = p.id
        GROUP BY option
    ) AS counted_votes
) AS vote_counts ON TRUE
WHERE p.id = $1
`

type GetPollWithVoteCountsRow struct {
	PollID      int64              `json:"poll_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Options     []string           `json:"options"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	Active      bool               `json:"active"`
	VoteCounts  []byte             `json:"vote_counts"`
}

func (q *Queries) GetPollWithVoteCounts(ctx context.Context, id int64) (GetPollWithVoteCountsRow, error) {
	row := q.db.QueryRow(ctx, getPollWithVoteCounts, id)
	var i GetPollWithVoteCountsRow
	err := row.Scan(
		&i.PollID,
		&i.Title,
		&i.Description,
		&i.Options,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Active,
		&i.VoteCounts,
	)
	return i, err
}

const listPolls = `-- name: ListPolls :many
SELECT count(*) OVER() AS total_records,
    id, title, description, options, created_at, expires_at, active FROM polls
WHERE active = true AND (expires_at IS NULL OR expires_at > now())
AND (to_tsvector('simple',title) @@ plainto_tsquery('simple',$1) OR $1 = '') 
ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListPollsParams struct {
	PlaintoTsquery string `json:"plainto_tsquery"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

type ListPollsRow struct {
	TotalRecords int64              `json:"total_records"`
	ID           int64              `json:"id"`
	Title        string             `json:"title"`
	Description  string             `json:"description"`
	Options      []string           `json:"options"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
	Active       bool               `json:"active"`
}

func (q *Queries) ListPolls(ctx context.Context, arg ListPollsParams) ([]ListPollsRow, error) {
	rows, err := q.db.Query(ctx, listPolls, arg.PlaintoTsquery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPollsRow{}
	for rows.Next() {
		var i ListPollsRow
		if err := rows.Scan(
			&i.TotalRecords,
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Options,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
